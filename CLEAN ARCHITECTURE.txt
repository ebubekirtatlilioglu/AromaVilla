CLEAN ARCHITECTURE
(ONION ARCHITECTURE)

E-book: 
https://aka.ms/webappebook

Docs: 
https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/
 
Github: 
https://github.com/dotnet-architecture/eShopOnWeb

Kullanacağımız Veritabanı:
PostgreSQL (postgres:123 port:5432)

Proje Yapısı
src
- Web			=> MVC
- Infrastructure	=> DbContext, Implementations
- ApplicationCore	=> Entities, Interfaces
tests
- UnitTests		=> Brim Testleri

Tasarım Prensipleri
- Separation of concerns
- Encapsulation
- Dependency inversion
- Single responsibility
- Dont reapeat yourself
- Persistence ignorance
- Bounded contexts

Görevler:
1. Blank Solution Oluştur
2. src ve test Solution klasörlerini oluştur
3. 4 adet proje olştur
4. Github'a yükle

Adımlar(Blank Solution oluşturduktan sonra):
1- src ve tests adında kalsörler oluşturduk

--------------------------------------------------------------------------------------------------

2- src içerisine "Class Library" projesi ekliyoruz ve adını "ApplicationCore" diyoruz. Location sonuna "\src" klasörünü ekle.

--------------------------------------------------------------------------------------------------

3- src içerisine "Class Library" projesi ekliyoruz ve adını "Infrastructure" diyoruz. Location sonuna "\src" klasörünü ekle.

--------------------------------------------------------------------------------------------------

4- src içerisine ASP Core MVC projesi ekliyoruz adını "Web" diyoruz. Location sonuna "\src" klasörünü ekle. (Authentication type: Individual Acoounts)

--------------------------------------------------------------------------------------------------

5- tests klasörüne "xUnit Test project" projesi ekliyoruz adını.Location sonuna "\tests" klasörünü ekle.

--------------------------------------------------------------------------------------------------

6- projemizi GitHub'a koyduk

--------------------------------------------------------------------------------------------------

7- ApplicationCore projesinde "Entities" adında bir klasör ve içerisinde "BaseEntity" adında bir sınıf oluştur.

--------------------------------------------------------------------------------------------------

8- Sınıf içine aşağıdaki prop. ekle
     public virtual int Id { get; set; }

--------------------------------------------------------------------------------------------------

9- Aynı klasörde Category.cs oluştur BaseEntity'den miras al aşağıdaki prop ekle
	public string Name { get; set; } = null!;

--------------------------------------------------------------------------------------------------

10- Aynı klasörde Brand.cs oluştur BaseEntity'den miras al aşağıdaki prop ekle
	public string Name { get; set; } = null!;

--------------------------------------------------------------------------------------------------

11- Aynı klasörde Product.cs oluştur BaseEntity'den miras al aşağıdaki prop ekle
	  public string Name { get; set; } = null!;
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public string? PictureUri { get; set; }
        public int CategoryId { get; set; }
        public int BrandId { get; set; }
        public Category Category { get; set; } = null!;
        public Brand Brand { get; set; } = null!;

--------------------------------------------------------------------------------------------------

12- "ApplicationCore" projesine "Interfaces" adında bir klasör açıp içerisine "IRepository.cs" interface'i açıyoruz. (Repository Design)

public interface IRepository<T> where T : BaseEntity
    {
        Task<T?> GetByIdAsync(int id);
        Task<List<T>> GetAllAsync();
        Task<T> AddAsync(T entity);
        Task UpdateAsync(T entity);
        Task DeleteAsync(T entity);
    }

--------------------------------------------------------------------------------------------------

13- Solutionın kendisine README.md dosyası ekliyoruz

# AromaVilla
A Sample N-layered .NET Core Project Demonstrating Clean Architecture and the Generic Reposityory Pattern

## Packages

## ApplicationCore
```
Install-Package Ardalis.Specification -v 6.1.0
```

--------------------------------------------------------------------------------------------------

14- Package Manager Console'dan src\ApplicationCore seçili iken aşağıdakini yükle

Install-Package Ardalis.Specification -v 6.1.0 

--------------------------------------------------------------------------------------------------

15- IRepository.cs içine aşağıdaki metotlarla değiştir

	  Task<T?> GetByIdAsync(int id);
        Task<List<T>> GetAllAsync();
        Task<List<T>> GetAllAsync(ISpecification<T> specification);
        Task<T> AddAsync(T entity);
        Task UpdateAsync(T entity);
        Task DeleteAsync(T entity);
        Task<int> CountAsync(ISpecification<T> specification);
        Task<T> FirstAsync(ISpecification<T> specification);
        Task<T?> FirsOrDefaultAsync(ISpecification<T> specification);

--------------------------------------------------------------------------------------------------

16- "Infrastructure" içine "Data" klasörü aç ve "ShopContext.cs" sınıfı oluştur

--------------------------------------------------------------------------------------------------

17- EF paketlerini "Infrastructure" içine kur

Install-Package Microsoft.EntityFrameworkCore -v 6.0.15
Install-Package Microsoft.EntityFrameworkCore.Tools -v 6.0.15
Install-Package Npgsql.EntityFrameworkCore.PostgreSQL -v 6.0.8

--------------------------------------------------------------------------------------------------

18- "ShopContext.cs" içierisini

public class ShopContext : DbContext
    {
        public ShopContext(DbContextOptions<ShopContext> options) : base(options)
        {

        }

        public DbSet<Category> Categories => Set<Category>();
        public DbSet<Brand> Brands => Set<Brand>();
        public DbSet<Product> Products => Set<Product>();

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Fluent api ayar dosyası oluşturacaz içini burda okutacaz
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        }
    }

--------------------------------------------------------------------------------------------------

19- Data klasörü içine "Config" klasörü aç. İçine Category ayarları için "CategoryConfiguration.cs" sınıfı oluştur. Interface'i implement et

 public class CategoryConfiguration : IEntityTypeConfiguration<Category>
    {
        public void Configure(EntityTypeBuilder<Category> builder)
        {
            builder.Property(x => x.Name)
                .HasMaxLength(100);
        }
    }


--------------------------------------------------------------------------------------------------

20- 19. maddedeki işlemlerin aynısını BrandConfiguration ve ProductConfiguration için yap ancak Product için ekstra olarak ekle

   builder.Property(x => x.Price)
                .HasPrecision(18, 2);

--------------------------------------------------------------------------------------------------

21-  appsettings'e connection string oluştur
 "ShopContext": "Host=localhost;Database=ShopContextDb;Username=postgres;Password=123"

--------------------------------------------------------------------------------------------------

22-  Install-Package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore -Version 6.0.15

program.cs add services

// Add services to the container.
builder.Services.AddDbContext<ShopContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("ShopContext")));

builder.Services.AddDbContext<AppIdentityDbContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("AppIdentityDbContext")));


builder.Services.AddDatabaseDeveloperPageExceptionFilter();



builder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = true)
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<AppIdentityDbContext>();
builder.Services.AddControllersWithViews();

--------------------------------------------------------------------------------------------------

23- Web katmanına - Install-Package Microsoft.EntityFrameworkCore.Tools -v 6.0.15
Web katmanını set startup yap migration. birden fazla context olacağı için Context'i seç

Add-Migration InitialCreate -context ShopContext -OutputDir Data/Migrations

--------------------------------------------------------------------------------------------------

24- Update-Database -context ShopContext

--------------------------------------------------------------------------------------------------

25- "Web" katmanındaki "ApplicationDbContext.cs" sınıfını "Infrastructure" katmanına taşı

"Web" içindeki "Data" klasörünü sil ve hata veren yerleri yoruma al

"Infrastructure" paketlerinde sadece bunlar olacak

Microsoft.AspNetCore.Identity.EntityFrameworkCore
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Tools
Npgsql.EntityFrameworkCore.PostgreSQL


"Web" paketleri

Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore
Microsoft.AspNetCore.Identity.UI
Microsoft.EntityFrameworkCore.Tools

--------------------------------------------------------------------------------------------------

26- "Infrastructure" içine "Identity" adınde klasör aç

AppIdentityDbContext.cs sınıfı oluştur

    public class AppIdentityDbContext : IdentityDbContext<ApplicationUser>
    {
        public AppIdentityDbContext(DbContextOptions<AppIdentityDbContext> options) : base(options)
        {

        }
    }


ApplicationUser.cs sınıfı oluştur
--------------------------------------------------------------------------------------------------

27- program.cs içerisinde servislere 

// Add services to the container.
builder.Services.AddDbContext<ShopContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("ShopContext")));

builder.Services.AddDbContext<AppIdentityDbContext>(options => options
    .UseNpgsql(builder.Configuration
        .GetConnectionString("AppIdentityDbContext")));

ekle

--------------------------------------------------------------------------------------------------

28- appsettings.json ConnectionStrings değiştir

  "ConnectionStrings": {
    "AppIdentityDbContext": "Host=localhost;Database=IdentityContextDb;Username=postgres;Password=123",
    "ShopContext": "Host=localhost;Database=ShopContextDb;Username=postgres;Password=123"
  },

--------------------------------------------------------------------------------------------------

29- Migration ve Update leri yap

Add-Migration InitialIdentity -context AppIdentityDbContext -OutputDir Identity/Migrations

Update-Database -context AppIdentityDbContext

--------------------------------------------------------------------------------------------------

30- Parfüm resimleri olan bir site bul - https://www.perfume.com/

Web > wwwroot > img > produtcs içine resimleri at

--------------------------------------------------------------------------------------------------

31-  Infrastructure > Data içine ShopContextSeed.cs oluştur 

ShopContextSeed.cs.txt içerisini kopyala yapıştır

--------------------------------------------------------------------------------------------------

32- LoginPartial inject leri değiştir

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

--------------------------------------------------------------------------------------------------

33- Program.cs'e run'dan önce ekle

using (var scope = app.Services.CreateScope())
{
    var shopContext = scope.ServiceProvider.GetRequiredService<ShopContext>(); // db'yi program çalışmadan önce enjekte ettik
    await ShopContextSeed.SeedAsync(shopContext);
} 

--------------------------------------------------------------------------------------------------

33- "Application Core" içerisine "Constant" klasörü aç "AuthorizationConstants.cs" sınıfı aç

 public static class AuthorizationConstants
    {
        public const string DEFAULT_DEMO_USER = "demouser@exampler.com";
        public const string DEFAULT_ADMIN_USER = "admin@example.com";
        public const string DEFAULT_PASSWORD = "P@ssword1";

        public static class Roles
        {
            public const string ADMINSTRATOR = "Admin";
        }
    }

--------------------------------------------------------------------------------------------------

34- "Identity" klasörü içine "AppIdentityDbContextSeed.cs" snıfı oluştur

 public class AppIdentityDbContextSeed
    {
        public static async Task SeedAsync(AppIdentityDbContext db, RoleManager<IdentityRole> roleManager, UserManager<ApplicationUser> userManager)
        {
            await db.Database.MigrateAsync();

            if (await roleManager.Roles.AnyAsync() || await userManager.Users.AnyAsync()) return;

            await roleManager.CreateAsync(new IdentityRole(AuthorizationConstants.Roles.ADMINSTRATOR));

            var adminUser = new ApplicationUser()
            {
                Email = AuthorizationConstants.DEFAULT_ADMIN_USER,
                UserName= AuthorizationConstants.DEFAULT_ADMIN_USER,
                EmailConfirmed = true
            };
            await userManager.CreateAsync(adminUser, AuthorizationConstants.DEFAULT_PASSWORD);
            await userManager.AddToRoleAsync(adminUser, AuthorizationConstants.Roles.ADMINSTRATOR);

            var demoUser = new ApplicationUser()
            {
                Email = AuthorizationConstants.DEFAULT_DEMO_USER,
                UserName= AuthorizationConstants.DEFAULT_DEMO_USER,
                EmailConfirmed = true
            };
            await userManager.CreateAsync(demoUser, AuthorizationConstants.DEFAULT_PASSWORD);
        }
    }

--------------------------------------------------------------------------------------------------

35- Program.cs içerisinde "var shopContext = scope.ServiceProvider.GetRequiredService<ShopContext>(); // db'yi program çalışmadan önce enjekte ettik" kodunun altına

    var identityContext = scope.ServiceProvider.GetRequiredService<AppIdentityDbContext>();
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

    await ShopContextSeed.SeedAsync(shopContext);
    await AppIdentityDbContextSeed.SeedAsync(identityContext, roleManager, userManager);

ekliyoruz

--------------------------------------------------------------------------------------------------

36- Infrastructure/Data  içine "EfRepository.cs" sınıfı aç ve "IRepository.cs" i implement et

EFRepository.cs.txt dosyasını bu sınıfa yapıştır

/*
_db.Set<T>().Add(entity);
_db.Add(entity);  		bu iki metot aynı şey


Specification kurulumu için 
Install-Package Ardalis.Specification.EntityFrameworkCore  -v 6.1.0
Install-Package Ardalis.Specification  -v 6.1.0

örnek olarak 

        public Task<T> FirstAsync(ISpecification<T> specification)
        {
            return _db.Set<T>().WithSpecification(specification).FirstAsync(); bu kod gelecek olan sorguyu karşılayıp türünü generic olarak dönüştürecek gibi düşünebiliriz
        }
*/

--------------------------------------------------------------------------------------------------

37- Web katmanında "Program.cs" içinde servislere ekle (web katmanında interface kullanacağımız için "IRepository" gördüğümüz yerde "EFRepository" kullan gibi düşünebiliriz)

builder.Services.AddScoped(typeof(IRepository<>), typeof(EFRepository<>)); 

--------------------------------------------------------------------------------------------------

38- usinglere ekle/değiştir
global using ApplicationCore.Interfaces;
global using ApplicationCore.Entities;

--------------------------------------------------------------------------------------------------

39- Projeyi denemek için Home > Index > View içine 
@inject IRepository<Product> ProductRepo
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<ul>
    @foreach (var item in await ProductRepo.GetAllAsync())
    {
        <li>@item.Name @item.Price.ToString("c2")</li>

    }
</ul>

--------------------------------------------------------------------------------------------------

40- Uygulamanın para birimini deiştirmek için "Program.cs" app.UseStaticFiles(); altına ekle

app.UseRequestLocalization("en-US");

--------------------------------------------------------------------------------------------------

41- Web katmanında Models içine ProductViewModel.cs sınıfı oluştur içine propları ekle. View kısmıyla bu VM'ler ilgilenecek

        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public decimal Price { get; set; }
        public string? PictureUri { get; set; }

--------------------------------------------------------------------------------------------------

42- Web katmanında Models içine HomeViewModel.cs sınıfı oluştur içine propları ekle

        public List<ProductViewModel> Products { get; set; } = new();
        public List<SelectListItem> Categories { get; set; } = new();
        public List<SelectListItem> Brands { get; set; } = new();
        public int? CategoryId { get; set; }
        public int? BrandId { get; set; }

--------------------------------------------------------------------------------------------------

43- Program.cs'e ekle global using Web.Models;

--------------------------------------------------------------------------------------------------

44- Web katmanına "Interfaces" klasörü aç. "IHomeViewModelService.cs" interface oluştur

    public interface IHomeViewModelService
    {
        Task<HomeViewModel> GetHomeViewModelAsync(int? categoryId, int? brandId, int pageId = 1);
    }

--------------------------------------------------------------------------------------------------

45-  Web katmanına "Services" klasörü aç. "HomeViewModelService.cs" sınıfı oluştur

public class HomeViewModelService : IHomeViewModelService
    {
        private readonly IRepository<Category> _categoryRepo;
        private readonly IRepository<Brand> _brandRepo;
        private readonly IRepository<Product> _productRepo;

        public HomeViewModelService(IRepository<Category> categoryRepo, IRepository<Brand> brandRepo, IRepository<Product> productRepo)
        {
            _categoryRepo=categoryRepo;
            _brandRepo=brandRepo;
            _productRepo=productRepo;
        }
        public async Task<HomeViewModel> GetHomeViewModelAsync(int? categoryId, int? brandId, int pageId = 1)
        {
            // not: şu an seçili kategori id, seçilimarka id ve mevcut sayfa no dikkate alınmıyor
            var products = await _productRepo.GetAllAsync();
            var vm = new HomeViewModel()
            {
                Products = products.Select(x => new ProductViewModel()
                {
                    Id = x.Id,
                    Name = x.Name,
                    PictureUri= x.PictureUri,
                    Price = x.Price,
                }).ToList(),
                Categories = await GetCategoriesAsync(),
                Brands = await GetBrandsAsync(),
                CategoryId= categoryId,
                BrandId= brandId
            };

            return vm;
        }

        private async Task<List<SelectListItem>> GetBrandsAsync()
        {
            var brands = await _brandRepo.GetAllAsync();
            return brands.Select(x => new SelectListItem()
            {
                Text= x.Name,
                Value = x.Id.ToString()
            }).ToList();
        }

        private async Task<List<SelectListItem>> GetCategoriesAsync()
        {
            var categories = await _categoryRepo.GetAllAsync();
            return categories.Select(x => new SelectListItem()
            {
                Text= x.Name,
                Value = x.Id.ToString()
            }).ToList();
        }
    }

--------------------------------------------------------------------------------------------------

46- Program.cs servislere ekle

builder.Services.AddScoped<IHomeViewModelService, HomeViewModelService>();

--------------------------------------------------------------------------------------------------

47- HomeController içini değiştir

using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using Web.Interfaces;
using Web.Models;

namespace Web.Controllers
{
    public class HomeController : Controller
    {
        private readonly IHomeViewModelService _homeViewModelService;

        public HomeController(IHomeViewModelService homeViewModelService)
        {
            _homeViewModelService=homeViewModelService;
        }

        public async Task<IActionResult> Index(int? categoryId, int? braindId, int pageId = 1)
        {
            var vm = await _homeViewModelService.GetHomeViewModelAsync(categoryId, braindId, pageId);
            return View(vm);
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

--------------------------------------------------------------------------------------------------

48- HomeController/Index şimdilik verileri göstermelik yapalım

@model HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}

<select asp-items="Model.Categories">
    <option value="value">Choose</option>
</select>


<select asp-items="Model.Brands">
    <option value="value">Choose</option>
</select>

@foreach (var item in Model.Products)
{
    <div>
        @item.Name
    </div>
}

--------------------------------------------------------------------------------------------------

49- https://fonts.google.com/specimen/Lato fontunu projeye ekle

Lato içinden istediklerini seç sağ alttan linkini layout'a ekle. css'i site.css body içine yapıştır


--------------------------------------------------------------------------------------------------

50- "css ellipsis 2 lines" taşan satırları "..." olarak gizlemek için googlede aratalım. taşacak olan class'ın css'ine yaz

.product-name {
    height: 3rem;
    overflow:hidden;
    text-overflow:ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient:vertical;
    font-weight:600;
}

--------------------------------------------------------------------------------------------------

51- wwwroot/lib'e 'add client library' ile fontawesome indiriyoruz. layout linklere ekle

<link href="~/lib/font-awesome/css/all.min.css" rel="stylesheet" />

--------------------------------------------------------------------------------------------------

52- Index.cshtml'de button'u değiştir

<button class="btn btn-sm btn-outline-dark">
	<i class="fa-solid fa-cart-plus"></i>
</button>

--------------------------------------------------------------------------------------------------

53-Index'e CategoryId ve BrandId göndermesi için formu geliştirelim

<form class="d-flex p-2 mb-3 border bg-light rounded" method="get">
    <select asp-for="CategoryId" asp-items="Model.Categories" class="form-select w-auto me-2">
        <option value="">Category</option>
    </select>

    <select asp-for="BrandId" asp-items="Model.Brands" class="form-select w-auto me-2">
        <option value="">Brand</option>
    </select>

    <button class="btn btn-primary">
        <i class="fa-solid fa-magnifying-glass"></i>
    </button>
</form>

--------------------------------------------------------------------------------------------------

54- AppCore Specifications kalsörü aç ProductsFilterSpecifications sınıfı oluştur ctor'una filtreleri oluştur

 public class ProductsFilterSpecifications : Specification<Product>
    {
        public ProductsFilterSpecifications(int? categoryId, int? brandId)
        {
            if (categoryId != null)
                Query.Where(x => x.CategoryId == categoryId); // sorguya Where ekle

            if (brandId != null)
                Query.Where(x => x.BrandId == brandId);
        }
    }

--------------------------------------------------------------------------------------------------

55- "HomeViewModelService.cs" snıfında "GetHomeViewModelAsync" metodunu değiştir

 public async Task<HomeViewModel> GetHomeViewModelAsync(int? categoryId, int? brandId, int pageId = 1)
        {
            var specProducts = new ProductsFilterSpecifications(categoryId, brandId);

            var products = await _productRepo.GetAllAsync(specProducts);
            var vm = new HomeViewModel()
            {
                Products = products.Select(x => new ProductViewModel()
                {
                    Id = x.Id,
                    Name = x.Name,
                    PictureUri= x.PictureUri,
                    Price = x.Price,
                }).ToList(),
                Categories = await GetCategoriesAsync(),
                Brands = await GetBrandsAsync(),
                CategoryId= categoryId,
                BrandId= brandId
            };

            return vm;
        }

--------------------------------------------------------------------------------------------------

56-  "Web" katmanına "Constant.cs" sınıfı aç. Sayfada ki ürün sayısnıı yaz

    public static class Constants
    {
        public const int ITEMS_PER_PAGE = 4;
    }
--------------------------------------------------------------------------------------------------

57-Web/Models içine "PaginationInfoViewModel.cs" sınfı oluştur propları ekle

 public class PaginationInfoViewModel
    {
        public int PageId { get; set; }
        public int TotalItems { get; set; }
        public int ItemsOnPage { get; set; }
        public int TotalPages => (int)Math.Ceiling(TotalItems / (double)Constants.ITEMS_PER_PAGE);
        public bool HasPrevious => PageId > 1;
        public bool HasNext => PageId < TotalPages;
        public int RangeStart => (PageId - 1) * Constants.ITEMS_PER_PAGE + 1;
        public int RangeEnd => RangeStart + ItemsOnPage - 1;
    }

--------------------------------------------------------------------------------------------------

58- HomeViewModel.cs içine yeni prop ekle

   public PaginationInfoViewModel PaginationInfo { get; set; } = null!;

--------------------------------------------------------------------------------------------------

59- "ProductsFilterSpecifications.cs" içine 

     public ProductsFilterSpecifications(int? categoryId, int? brandId, int skip, int take) : this(categoryId, brandId) 
        {
            Query.Skip(skip).Take(take);
        }

--------------------------------------------------------------------------------------------------

60- "HomeViewModelService.cs" içerisine "GetHomeViewModelAsync" metodunu güncelle

  public async Task<HomeViewModel> GetHomeViewModelAsync(int? categoryId, int? brandId, int pageId = 1)
        {
            var specProducts = new ProductsFilterSpecifications(categoryId, brandId);
            var specProductsPaginated = new ProductsFilterSpecifications(categoryId, brandId, (pageId -1) * Constants.ITEMS_PER_PAGE, Constants.ITEMS_PER_PAGE);

            var totalItems = await _productRepo.CountAsync(specProducts);
            var products = await _productRepo.GetAllAsync(specProductsPaginated);
            var vm = new HomeViewModel()
            {
                Products = products.Select(x => new ProductViewModel()
                {
                    Id = x.Id,
                    Name = x.Name,
                    PictureUri= x.PictureUri,
                    Price = x.Price,
                }).ToList(),
                Categories = await GetCategoriesAsync(),
                Brands = await GetBrandsAsync(),
                CategoryId= categoryId,
                BrandId= brandId,
                PaginationInfo = new PaginationInfoViewModel()
                {
                    PageId= pageId,
                    ItemsOnPage = products.Count,
                    TotalItems= totalItems
                }
            };

            return vm;
        }

--------------------------------------------------------------------------------------------------

61- Home/Index.cshtml sayfasına en alta ekle

@{ var pi = Model.PaginationInfo; }

<div class="d-flex justify-content-center">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if (pi.HasPrevious)
            {
                <li class="page-item">
                    <a class="page-link" asp-route-categoryId="@Model.CategoryId" asp-route-brandId="@Model.BrandId" asp-route-pageId="@(pi.PageId-1)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            }

            @for (int i = 1; i <= pi.TotalPages; i++)
            {
                <li class="page-item @(i == pi.PageId ? "active" : "")">
                    <a class="page-link" asp-route-categoryId="@Model.CategoryId" asp-route-brandId="@Model.BrandId" asp-route-pageId="@i">
                        @i
                    </a>
                </li>

            }
            @if (pi.HasNext)
            {
                <li class="page-item">
                    <a class="page-link" asp-route-categoryId="@Model.CategoryId" asp-route-brandId="@Model.BrandId" asp-route-pageId="@(pi.PageId+1)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <a class="page-link" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            }
        </ul>
    </nav>
</div>
<div class="text-center">Showing @pi.RangeStart-@pi.RangeEnd of @pi.TotalItems products</div>

--------------------------------------------------------------------------------------------------

62- PaginationInfoViewModel içine en sona property ekleyip metot yaz. Buradaki amaç 6 sayfanın 4. sayfasındaysak <1...3 _4_ 5 ... 12> gibi gözükecek 

 public int[] PageNumbers => Pagination(PageId, TotalPages);

        private int[] Pagination(int current, int last)
        {
            int delta = 1;
            int left = current - delta;
            int right = current + delta + 1;
            var range = new List<int>();
            var rangeWithDots = new List<int>();
            int? l = null;

            for (var i = 1; i <= last; i++)
            {
                if (i == 1 || i == last || i >= left && i < right)
                {
                    range.Add(i);
                }
            }

            foreach (var i in range)
            {
                if (l != null)
                {
                    if (i - l == 2)
                    {
                        rangeWithDots.Add(l.Value + 1);
                    }
                    else if (i - l != 1)
                    {
                        rangeWithDots.Add(-1);
                    }
                }
                rangeWithDots.Add(i);
                l = i;
            }

            return rangeWithDots.ToArray();
        }
    }

--------------------------------------------------------------------------------------------------

63-Index.cshtml'de bu kodu değiştir

            @for (int i = 1; i <= pi.TotalPages; i++)
            {
                <li class="page-item @(i == pi.PageId ? "active" : "")">
                    <a class="page-link" asp-route-categoryId="@Model.CategoryId" asp-route-brandId="@Model.BrandId" asp-route-pageId="@i">
                        @i
                    </a>
                </li>
            }
yerine

            @foreach (var i in pi.PageNumbers)
            {
                if (i > 0)
                {
                    <li class="page-item @(i == pi.PageId ? "active" : "")">
                        <a class="page-link" asp-route-categoryId="@Model.CategoryId" asp-route-brandId="@Model.BrandId" asp-route-pageId="@i">
                            @i
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <a class="page-link" asp-route-categoryId="@Model.CategoryId" asp-route-brandId="@Model.BrandId" asp-route-pageId="@i">
                            <span aria-hidden="true">&hellip;</span>
                        </a>
                    </li>
                }
            }


--------------------------------------------------------------------------------------------------

64- ApplicaitonCore > Entities içine "BasketItem.cs" oluştur

    public class BasketItem : BaseEntity
    {
        public int BasketId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
        public Product Product { get; set; } = null!;
    }

--------------------------------------------------------------------------------------------------

65- ApplicaitonCore > Entities içine "Basket.cs" oluştur

    public class Basket: BaseEntity
    {
        public string BuyerId { get; set; } = null!;
        public List<BasketItem> Items { get; set; } = new();
    }
--------------------------------------------------------------------------------------------------

66-

--------------------------------------------------------------------------------------------------

67-

--------------------------------------------------------------------------------------------------

68-

--------------------------------------------------------------------------------------------------

69-

--------------------------------------------------------------------------------------------------

70-

--------------------------------------------------------------------------------------------------

71-

--------------------------------------------------------------------------------------------------

72-

--------------------------------------------------------------------------------------------------

73-

--------------------------------------------------------------------------------------------------

74-

--------------------------------------------------------------------------------------------------

75-

--------------------------------------------------------------------------------------------------

76-










































